{"version":3,"names":[],"mappings":"","sources":["shards-dashboards.1.3.1.js"],"sourcesContent":["/*!\n* Shards Dashboards v1.3.1\n* Copyright 2017-2019 DesignRevision\n* SEE LICENSE FILE\n*/\n(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(factory());\n}(this, (function () { 'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar camelize = function(obj) {\n    if (typeof obj === 'string') return camelCase(obj);\n    return walk(obj);\n};\n\nfunction walk (obj) {\n    if (!obj || typeof obj !== 'object') return obj;\n    if (isDate(obj) || isRegex(obj)) return obj;\n    if (isArray(obj)) return map(obj, walk);\n    return reduce(objectKeys(obj), function (acc, key) {\n        var camel = camelCase(key);\n        acc[camel] = walk(obj[key]);\n        return acc;\n    }, {});\n}\n\nfunction camelCase(str) {\n    return str.replace(/[_.-](\\w|$)/g, function (_,x) {\n        return x.toUpperCase();\n    });\n}\n\nvar isArray = Array.isArray || function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Array]';\n};\n\nvar isDate = function (obj) {\n    return Object.prototype.toString.call(obj) === '[object Date]';\n};\n\nvar isRegex = function (obj) {\n    return Object.prototype.toString.call(obj) === '[object RegExp]';\n};\n\nvar has = Object.prototype.hasOwnProperty;\nvar objectKeys = Object.keys || function (obj) {\n    var keys = [];\n    for (var key in obj) {\n        if (has.call(obj, key)) keys.push(key);\n    }\n    return keys;\n};\n\nfunction map (xs, f) {\n    if (xs.map) return xs.map(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        res.push(f(xs[i], i));\n    }\n    return res;\n}\n\nfunction reduce (xs, f, acc) {\n    if (xs.reduce) return xs.reduce(f, acc);\n    for (var i = 0; i < xs.length; i++) {\n        acc = f(acc, xs[i], i);\n    }\n    return acc;\n}\n\n// Shards Dashboards Colors\nvar Color =\n/*#__PURE__*/\nfunction () {\n  function Color(value) {\n    _classCallCheck(this, Color);\n\n    this.value = value;\n  }\n\n  _createClass(Color, [{\n    key: \"toHex\",\n    value: function toHex() {\n      return this.value;\n    }\n  }, {\n    key: \"toRGBA\",\n    value: function toRGBA() {\n      var opacity = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n      var c;\n\n      if (/^#([A-Fa-f0-9]{3}){1,2}$/.test(this.value)) {\n        c = this.value.substring(1).split('');\n\n        if (c.length == 3) {\n          c = [c[0], c[0], c[1], c[1], c[2], c[2]];\n        }\n\n        c = '0x' + c.join('');\n        return 'rgba(' + [c >> 16 & 255, c >> 8 & 255, c & 255].join(',') + ',' + opacity + ')';\n      }\n    }\n  }]);\n\n  return Color;\n}();\n\nvar grays = {\n  'white': new Color('#ffffff'),\n  'gray100': new Color('#f8f9fa'),\n  'gray200': new Color('#e9ecef'),\n  'gray300': new Color('#dee2e6'),\n  'gray400': new Color('#ced4da'),\n  'gray500': new Color('#adb5bd'),\n  'gray600': new Color('#868e96'),\n  'gray700': new Color('#495057'),\n  'gray800': new Color('#343a40'),\n  'gray900': new Color('#212529'),\n  'black': new Color('#000')\n};\nvar colors = {\n  'blueishGrey': new Color('#5A6169'),\n  'blue': new Color('#007bff'),\n  'indigo': new Color('#674eec'),\n  'purple': new Color('#8445f7'),\n  'pink': new Color('#ff4169'),\n  'red': new Color('#c4183c'),\n  'orange': new Color('#fb7906'),\n  'yellow': new Color('#ffb400'),\n  'green': new Color('#17c671'),\n  'teal': new Color('#1adba2'),\n  'cyan': new Color('#00b8d8'),\n  'gray': grays['gray600'],\n  'grayDark': grays['gray800']\n}; // Custom colors specific to Shards Dashboards, includes the new \"grays\".\n\nvar newColors = {\n  'fiordBlue': new Color('#3D5170'),\n  'reagentGray': new Color('#818EA3'),\n  'shuttleGray': new Color('#5A6169'),\n  'mischka': new Color('#CACEDB'),\n  'athensGray': new Color('#E9ECEF'),\n  'salmon': new Color('#FF4169'),\n  'royalBlue': new Color('#674EEC'),\n  'java': new Color('#1ADBA2')\n};\nvar themeColors = {\n  'accent': colors['blue'],\n  'primary': colors['blue'],\n  'secondary': colors['blueishGrey'],\n  'success': colors['green'],\n  'info': colors['cyan'],\n  'warning': colors['yellow'],\n  'danger': colors['red'],\n  'light': grays['gray200'],\n  'dark': grays['gray800']\n}; // Allow users to override any color\n\nvar overrides = window.ShardsDashboards && window.ShardsDashboards.colors ? window.ShardsDashboards.colors : {}; // Parse overriden colors\n\nif (Object.keys(overrides).length !== 0 && overrides.constructor === Object) {\n  for (var colorName in overrides) {\n    if (overrides.hasOwnProperty(colorName)) {\n      if (!/^#([A-Fa-f0-9]{3}$)|([A-Fa-f0-9]{6}$)/.test(overrides[colorName])) throw new Error('Please provide a hexadecimal color value if you are trying to override the Shards Dashboards colors.');\n      overrides[camelize(colorName)] = new Color(overrides[colorName]);\n    }\n  }\n}\n\nvar colors$1 = _extends({}, grays, colors, newColors, themeColors, overrides);\n\nif (typeof Chart === 'undefined') {\n  throw new Error('Shards Dashboards requires the Chart.js library in order to work properly.');\n}\n\nwindow.ShardsDashboards = window.ShardsDashboards ? window.ShardsDashboards : {};\nwindow.ShardsDashboards.colors = colors$1; // Add jQuery easing.\n\n$.extend($.easing, {\n  easeOutSine: function easeOutSine(x, t, b, c, d) {\n    return c * Math.sin(t / d * (Math.PI / 2)) + b;\n  }\n});\n/**\n * Global Chart.js Style Adjustments\n */\n//\n// Default chart styles\n//\n// Fonts\n\nChart.defaults.global.defaultFontColor = '#BBBCC1'; // Points\n\nChart.defaults.global.elements.point.backgroundColor = 'rgba(255, 255, 255, 1)';\nChart.defaults.global.elements.point.radius = 4;\nChart.defaults.global.elements.point.hoverRadius = 6; // Grid lines\n\nChart.defaults.scale.gridLines.color = 'rgba(233, 236 ,239, 1)'; // Ticks\n\nChart.defaults.scale.ticks.autoSkip = false;\nChart.defaults.scale.ticks.minRotation = 0;\nChart.defaults.scale.ticks.maxRotation = 0;\nChart.defaults.scale.ticks.padding = 10; // Points\n\nChart.defaults.global.elements.point.backgroundColor = colors$1.white.toHex();\nChart.defaults.global.elements.point.radius = 4;\nChart.defaults.global.elements.point.hoverRadius = 5; // Custom tooltips\n\nChart.defaults.global.tooltips.custom = function (tooltip) {\n  var tooltipEl = document.getElementsByClassName('sc-tooltip-' + this._chart.id)[0];\n\n  if (!tooltipEl) {\n    tooltipEl = document.createElement('div');\n    tooltipEl.classList.add('sc-tooltip-' + this._chart.id);\n    tooltipEl.innerHTML = \"<table></table>\";\n\n    this._chart.canvas.parentNode.appendChild(tooltipEl);\n  } // Hide if no tooltip\n\n\n  if (tooltip.opacity === 0) {\n    tooltipEl.style.opacity = 0;\n    return;\n  } // Set caret Position\n\n\n  tooltipEl.classList.remove('above', 'below', 'no-transform');\n\n  if (tooltip.yAlign) {\n    tooltipEl.classList.add(tooltip.yAlign);\n  } else {\n    tooltipEl.classList.add('no-transform');\n  }\n\n  function getBody(bodyItem) {\n    return bodyItem.lines;\n  } // Set Text\n\n\n  if (tooltip.body) {\n    var titleLines = tooltip.title || [];\n    var bodyLines = tooltip.body.map(getBody);\n    var innerHtml = '<thead>';\n    titleLines.forEach(function (title) {\n      innerHtml += '<tr><th>' + title + '</th></tr>';\n    });\n    innerHtml += '</thead><tbody>';\n    bodyLines.forEach(function (body, i) {\n      var colors = tooltip.labelColors[i];\n      var style = 'background:' + colors.backgroundColor;\n      style += '; border-color:' + colors.borderColor;\n      style += '; border-width: 2px';\n      var span = '<span class=\"sc-tooltip-key\" style=\"' + style + '\"></span>';\n      innerHtml += \"<tr><td>\".concat(span, \" \").concat(body, \"</td></tr>\");\n    });\n    innerHtml += '</tbody>';\n    var tableRoot = tooltipEl.querySelector('table');\n    tableRoot.innerHTML = innerHtml;\n  }\n\n  var positionY = this._chart.canvas.offsetTop;\n  var positionX = this._chart.canvas.offsetLeft; // Display, position, and set styles for font\n\n  tooltipEl.style.opacity = 1;\n  tooltipEl.style.left = positionX + tooltip.caretX + 'px';\n  tooltipEl.style.top = positionY + tooltip.caretY + 'px';\n}; // Custom legends callback.\n\n\nChart.defaults.global.legendCallback = function (chart) {\n  var text = \"<ul class=\\\"sc-legend-container sc-legend-chart-\".concat(chart.id, \"\\\">\");\n  chart.data.datasets.map(function (set) {\n    text += \"<li class=\\\"sc-legend\\\"><span class=\\\"sc-legend__label\\\" style=\\\"background: \".concat(set.borderColor, \" !important;\\\"></span>\").concat(set.label ? set.label : '', \"</li>\");\n  });\n  text += '</ul>';\n  return text;\n};\n\nChart.defaults.LineWithLine = Chart.defaults.line;\nChart.controllers.LineWithLine = Chart.controllers.line.extend({\n  draw: function draw(ease) {\n    Chart.controllers.line.prototype.draw.call(this, ease);\n\n    if (this.chart.tooltip._active && this.chart.tooltip._active.length) {\n      var activePoint = this.chart.tooltip._active[0],\n          ctx = this.chart.ctx,\n          x = activePoint.tooltipPosition().x,\n          topY = this.chart.scales['y-axis-0'].top,\n          bottomY = this.chart.scales['y-axis-0'].bottom; // Draw the line\n\n      ctx.save();\n      ctx.beginPath();\n      ctx.moveTo(x, topY);\n      ctx.lineTo(x, bottomY);\n      ctx.lineWidth = 0.5;\n      ctx.strokeStyle = '#ddd';\n      ctx.stroke();\n      ctx.restore();\n    }\n  }\n});\n$(document).ready(function () {\n  /**\n   * Dropdown adjustments\n   */\n  var slideConfig = {\n    duration: 270,\n    easing: 'easeOutSine'\n  }; // Add dropdown animations when toggled.\n\n  $(':not(.main-sidebar--icons-only) .dropdown').on('show.bs.dropdown', function () {\n    $(this).find('.dropdown-menu').first().stop(true, true).slideDown(slideConfig);\n  });\n  $(':not(.main-sidebar--icons-only) .dropdown').on('hide.bs.dropdown', function () {\n    $(this).find('.dropdown-menu').first().stop(true, true).slideUp(slideConfig);\n  }); // Sidebar toggle functionality.\n\n  $('.toggle-sidebar').click(function (e) {\n    $('.main-sidebar').toggleClass('open');\n  }); // Apply dynamic scroll to sidebar nav wrapper\n\n  $(window).resize(handleSidebarHeightCheck);\n\n  function handleSidebarHeightCheck() {\n    var $navWrapper = $('.nav-wrapper');\n    var height = $navWrapper.height();\n    var scrollHeight = $navWrapper[0].scrollHeight;\n\n    if (scrollHeight > height) {\n      $navWrapper.css('overflowY', 'auto');\n      return;\n    }\n\n    $navWrapper.css('overflowY', 'none');\n  }\n\n  handleSidebarHeightCheck();\n});\n\n})));\n"],"file":"shards-dashboards.1.3.1.js"}